#include <iostream>

using namespace std;


//int main(void)
//{
//	int iData;
//	/* 동적할당 */
//	// 메모리의 할당 시점과 삭제시점을 내가 직접 통제하고 싶다.
//
//	float* pInt = new float;
//
//	*pInt = 10;
//
//	cout << *pInt << endl;
//
//	/* delete 뒤에는 삭제하고자하는 공간의 주소가 온다. */
//	delete pInt;
//
//	// 삭제된 공간에 접근하는거 위험
//	// 삭제한 공간을 초기화하는 습관을 들이자
//	pInt = nullptr;
//	cout << *pInt << endl;
//
//}


//int main()
//{
//	int			iArray[3] = { 0 };
//
//	int*		pArray = new int[3];
//
//	pArray[0] = 10;
//	cout << *(pArray + 0) << endl;
//
//	pArray[1] = 20;
//	cout << *(pArray + 1) << endl;
//
//	// 배열로 선언시 삭제할때 [] 선언해주기
//	delete [] pArray;
//	pArray = nullptr;
//
//}


//int main()
//{
//	// new선언시 int뒤에 () 붙여주면 초기화가능
//	int*	 pInt = new int(2);
//
//
//	cout << *pInt << endl;
//
//	delete pInt;
//	pInt = nullptr;
//
//}


// =================================================================


/* 전역변수 */
// 특정 지역 ( {} )에 속하지 않은 변수이다.
// 지역에 속해있지 않기 때문에 같은 파일내에 존재하는 함수에서 이 변수를 사용할 수 있다.
// 초기화를 수행하지 않아도 항상 0이란 값을 가진다.
// 프로그램이 종료되어야 삭제된다.
// 컴파일단계. 제 프로그램이 시작되면 메모리도 할당된다.
//int g_iData;
//
//
//int main(void)
//{
//	/* 지역변수 */
//	// 특정 영역안에서 선언된 변수다.
//	// 사용범위도 이 영역으로 제한된다. 영역 {}
//	// {}영역이 삭제되면 메모리도 삭제된다. 자동으로 삭제
//	// 함수를 호출할때 해당 함수 안의 모든 지역변수들을 함꺼번에 할당
//	
//	/* 정적인 변수 */
//	// 선언 위치에 크게 구애받지 않는다.
//	// 선언 위치를 선정하는 기준은 사용범위를 기준으로 두면 된다.
//	// 내 프로그램이 시작하면 공간이 할당된다.
//	// 내 프로그램이 종료되면 공간이 삭제된다.
//	static int		iData = 10;
//
//
//	/* 상수화된 변수 const == constant */
//	const int		cData = 10;
//
//	/* const int*의 앞에 존재하는 경우, 이 주소가 가르키는 공간이 상수화 된 것이다. */
//	//const int*		pData = new int();
//	int* const		pData = new int();
//
//	//pData = &g_iData;
//
//	*pData = 10;
//
//
//	/*int& const rData = g_iData;
//
//	g_iData = 10;
//
//	rData = 10;*/
//
//
//}

// =============================================================

int main()
{
	/* 각각 변수의 종류(전역, 지역, 동적...) 에 따라서 어떤 메모리 영역에 할당이 되고, 언제 할당이되고, 언제 삭제되는지 */

	/* 코드 or 텍스트 : 코드영역 */
	/* 전역변수, 정적인 변수(static) : 데이터영역 */
	/* 동적할당된 변수 : 힙영역 */
	/* 지역변수 : 스택영역 */
}